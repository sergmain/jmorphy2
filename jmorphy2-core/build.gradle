import java.nio.file.Paths
import org.gradle.api.file.FileCopyDetails


description = 'Java port of pymorphy2'

dependencies {
    compile 'commons-io:commons-io:2.6'
    compile 'org.noggit:noggit:0.8'
    compile 'com.google.guava:guava:28.1-jre'

    compile project(':dawg')

    testCompile 'junit:junit:4.11'
    testCompile project(':jmorphy2-dicts-ru')
    testCompile project(':jmorphy2-dicts-uk')
}

task benchmark(type: Test) {
    include '**/*Benchmark*'
    outputs.upToDateWhen { false }
    testLogging {
        showStandardStreams = true
    }
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

def downloadAndUnpackDicts(packageName, version, md5, destPath) {
    String fullName = "${packageName}-${version}"
    String filename = "${fullName}.tar.gz"
    String url = "https://pypi.python.org/packages/source/p/${packageName}/${filename}?md5=${md5}"
    def baseDictsPath = destPath
    def versionFile = baseDictsPath.resolve('version.txt').toFile()
    if (versionFile.exists() && versionFile.getText('UTF-8') == version) {
        return
    }
    def dictsDir = baseDictsPath.resolve('pymorphy2_dicts').toFile()
    if (dictsDir.exists()) {
        dictsDir.delete()
    }
    def dictsFile = baseDictsPath.resolve(filename).toFile()
    if (dictsFile.exists()) {
        dictsFile.delete()
    }

    println "Downloading ${packageName} dicts..."
    dictsDir.mkdirs()
    new URL(url).withInputStream{ i -> dictsFile.withOutputStream{ it << i }}

    println "Unpacking ${packageName} dicts..."
    def zipRootDirName = packageName.replaceAll('-', "_")
    copy {
        from tarTree(resources.gzip(dictsFile))
        into dictsDir
        includeEmptyDirs = false
        eachFile { FileCopyDetails fcp ->
            String zipRootPath = "${fullName}/${zipRootDirName}/data/"
            Integer strip_segments = zipRootPath.length() - zipRootPath.replace('/', '').length()
            if (fcp.relativePath.pathString.startsWith(zipRootPath)) {
                fcp.relativePath = new RelativePath(
                    !fcp.file.isDirectory(),
                    fcp.relativePath.segments[strip_segments..-1] as String[]
                )
            } else {
              fcp.exclude()
            }
        }
    }
    // Store pymorhpy2 dictionary version
    baseDictsPath.resolve('version.txt').toFile().withWriter('UTF-8') { writer ->
      writer.write(version)
    }
    dictsFile.delete()
}
