buildscript {
    repositories {
        mavenCentral()
        maven {
            name 'sonatype-snapshots'
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'com.jfrog.bintray'

esplugin {
    name = 'analysis-jmorphy2'
    description 'Jmorphy2 plugin for ElasticSearch'
    classname = 'company.evo.jmorphy2.elasticsearch.plugin.AnalysisJmorphy2Plugin'
    licenseFile project.file('LICENSE.txt')
    noticeFile project.file('NOTICE.txt')
}

def libVersion = version
version = "${libVersion}-es${elasticsearchVersion}"

ext {
    dependenciesDir = "${buildDir}/dependencies"
}

dependencies {
    compile project(':jmorphy2-lucene')
    compile project(':jmorphy2-dicts-ru')
    compile project(':jmorphy2-dicts-uk')
}

//dependencyLicenses {
//    ignoreSha 'dawg'
//    ignoreSha 'jmorphy2-core'
//    ignoreSha 'jmorphy2-dicts-ru'
//    ignoreSha 'jmorphy2-dicts-uk'
//    ignoreSha 'jmorphy2-lucene'
//    ignoreSha 'jmorphy2-nlp'
//}

thirdPartyAudit.enabled = false
// TODO: write integration tests
integTest.enabled = false

bintray {
    user = project.hasProperty("bintrayUser") ?
        project.property("bintrayUser").toString() :
        System.getenv("BINTRAY_USER")
    key = project.hasProperty("bintrayApiKey") ?
        project.property("bintrayApiKey").toString() :
        System.getenv("BINTRAY_API_KEY")
    pkg {
        repo = "elasticsearch"
        name = project.name
        userOrg = "evo"
        licenses = ["Apache-2.0"]
        labels = ["elasticsearch-plugin", "analysis-plugin", "jmorphy2", "pymorphy2"]
        vcsUrl = "https://github.com/anti-social/jmorphy2.git"
        version {
            name = libVersion
            released = new Date().toString()
            vcsTag = "v$libVersion"
        }
    }
    filesSpec {
        def distributionsDir = buildDir.toPath().resolve("distributions")
        from distributionsDir
        include "*-${version}.zip"
        into "."
    }
    publish = true
    dryRun = project.hasProperty("bintrayDryRun")
}
